# make repo
mkdir [repo name]

git init

git remote add origin git@github.com:[github username]/[repo name].git
#  updating: git remote set-url origin git@github.com:[github username]/[repo name].git

git pull origin master

# unrelated histories
git pull --allow-unrelated-histories


# keys
## first time
https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
- ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account
- export .ssh/id_rsa.pub

## if key already exists



# fetch remote branches
git fetch origin
git checkout [remote branch name]


# branching

git checkout -b [branch name]
#  aka:		git branch [branch name] ; git checkout [branch name]

# if needing to hotfix, commit your branch changes, then:
git checkout master
git checkout -b hotfix
#  commit hotfix, merge master & hotfix:
git checkout master
git merge hotfix
git branch -d hotfix	# deletes hotfix branch


# committing updates

git commit -a
#  quickly: git commit -a -m "[message]"
#  aka:		git add * ; git commit -m "[message]"
#		    git unadd??
#	git commit -ammend

git push origin [branch]


# undo commit to add missing
git reset --soft HEAD^
#  also for:  commit on master, but should push to new branch already created
#  then push new branch  ; git log to check beforehand

# merging branches

#  CHECK MASTER AND BRANCH ARE COMMITTED
git checkout master
git merge [branch]
git branch -d [branch]

#  if conflicts
git status

#  nano into the problem
#  HEAD is master, everything above ==== ; everything below is branch
git add [combined file]

#  nano alt: GUI tool
git mergetool


# pull requests
